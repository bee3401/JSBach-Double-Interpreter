# Generated from bach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,5,9,84,8,9,10,
        9,12,9,87,9,9,1,10,1,10,5,10,91,8,10,10,10,12,10,94,9,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,5,22,126,8,22,10,22,12,22,129,9,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,5,23,139,8,23,10,23,12,23,142,9,23,1,23,1,
        23,1,24,4,24,147,8,24,11,24,12,24,148,1,24,1,24,0,0,25,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,
        8,1,0,65,71,1,0,48,57,1,0,97,122,4,0,48,57,65,90,95,95,97,122,1,
        0,65,90,2,0,10,10,13,13,1,0,34,34,2,0,10,10,32,32,156,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,
        54,1,0,0,0,5,57,1,0,0,0,7,60,1,0,0,0,9,66,1,0,0,0,11,69,1,0,0,0,
        13,73,1,0,0,0,15,77,1,0,0,0,17,79,1,0,0,0,19,81,1,0,0,0,21,88,1,
        0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,0,0,0,29,101,1,0,0,0,31,
        103,1,0,0,0,33,105,1,0,0,0,35,107,1,0,0,0,37,110,1,0,0,0,39,112,
        1,0,0,0,41,114,1,0,0,0,43,117,1,0,0,0,45,120,1,0,0,0,47,136,1,0,
        0,0,49,146,1,0,0,0,51,52,5,124,0,0,52,53,5,58,0,0,53,2,1,0,0,0,54,
        55,5,58,0,0,55,56,5,124,0,0,56,4,1,0,0,0,57,58,5,105,0,0,58,59,5,
        102,0,0,59,6,1,0,0,0,60,61,5,119,0,0,61,62,5,104,0,0,62,63,5,105,
        0,0,63,64,5,108,0,0,64,65,5,101,0,0,65,8,1,0,0,0,66,67,5,60,0,0,
        67,68,5,45,0,0,68,10,1,0,0,0,69,70,5,60,0,0,70,71,5,63,0,0,71,72,
        5,62,0,0,72,12,1,0,0,0,73,74,5,60,0,0,74,75,5,33,0,0,75,76,5,62,
        0,0,76,14,1,0,0,0,77,78,7,0,0,0,78,16,1,0,0,0,79,80,7,1,0,0,80,18,
        1,0,0,0,81,85,7,2,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,87,1,0,0,0,
        85,83,1,0,0,0,85,86,1,0,0,0,86,20,1,0,0,0,87,85,1,0,0,0,88,92,7,
        4,0,0,89,91,7,3,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,
        93,1,0,0,0,93,22,1,0,0,0,94,92,1,0,0,0,95,96,5,43,0,0,96,24,1,0,
        0,0,97,98,5,45,0,0,98,26,1,0,0,0,99,100,5,42,0,0,100,28,1,0,0,0,
        101,102,5,47,0,0,102,30,1,0,0,0,103,104,5,37,0,0,104,32,1,0,0,0,
        105,106,5,61,0,0,106,34,1,0,0,0,107,108,5,47,0,0,108,109,5,61,0,
        0,109,36,1,0,0,0,110,111,5,60,0,0,111,38,1,0,0,0,112,113,5,62,0,
        0,113,40,1,0,0,0,114,115,5,60,0,0,115,116,5,61,0,0,116,42,1,0,0,
        0,117,118,5,62,0,0,118,119,5,61,0,0,119,44,1,0,0,0,120,121,5,126,
        0,0,121,122,5,126,0,0,122,123,5,126,0,0,123,127,1,0,0,0,124,126,
        8,5,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,
        1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,5,126,0,0,131,132,
        5,126,0,0,132,133,5,126,0,0,133,134,1,0,0,0,134,135,6,22,0,0,135,
        46,1,0,0,0,136,140,5,34,0,0,137,139,8,6,0,0,138,137,1,0,0,0,139,
        142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,
        140,1,0,0,0,143,144,5,34,0,0,144,48,1,0,0,0,145,147,7,7,0,0,146,
        145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,
        150,1,0,0,0,150,151,6,24,0,0,151,50,1,0,0,0,6,0,85,92,127,140,148,
        1,6,0,0
    ]

class bachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    KEY = 8
    NUM = 9
    VAR = 10
    PROC = 11
    MES = 12
    MENYS = 13
    MUL = 14
    DIV = 15
    MOD = 16
    EQ = 17
    NEQ = 18
    LT = 19
    GT = 20
    LEQ = 21
    GEQ = 22
    COMMENT = 23
    STR = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'if'", "'while'", "'<-'", "'<?>'", "'<!>'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'/='", "'<'", "'>'", 
            "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "KEY", "NUM", "VAR", "PROC", "MES", "MENYS", "MUL", "DIV", "MOD", 
            "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "COMMENT", "STR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "KEY", "NUM", "VAR", "PROC", "MES", "MENYS", "MUL", "DIV", 
                  "MOD", "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "COMMENT", 
                  "STR", "WS" ]

    grammarFileName = "bach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


