# Generated from jsBach.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,208,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,4,19,133,8,19,11,19,12,19,134,
        1,20,1,20,5,20,139,8,20,10,20,12,20,142,9,20,1,21,1,21,5,21,146,
        8,21,10,21,12,21,149,9,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,5,33,182,8,33,
        10,33,12,33,185,9,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,5,34,
        195,8,34,10,34,12,34,198,9,34,1,34,1,34,1,35,4,35,203,8,35,11,35,
        12,35,204,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,1,0,9,1,0,65,71,1,0,48,56,1,0,48,
        57,1,0,97,122,4,0,48,57,65,90,95,95,97,122,1,0,65,90,2,0,10,10,13,
        13,1,0,34,34,2,0,10,10,32,32,213,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,76,1,0,0,
        0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,86,1,0,0,0,13,90,1,0,
        0,0,15,94,1,0,0,0,17,98,1,0,0,0,19,101,1,0,0,0,21,106,1,0,0,0,23,
        112,1,0,0,0,25,114,1,0,0,0,27,116,1,0,0,0,29,118,1,0,0,0,31,120,
        1,0,0,0,33,122,1,0,0,0,35,125,1,0,0,0,37,128,1,0,0,0,39,132,1,0,
        0,0,41,136,1,0,0,0,43,143,1,0,0,0,45,150,1,0,0,0,47,152,1,0,0,0,
        49,154,1,0,0,0,51,156,1,0,0,0,53,158,1,0,0,0,55,160,1,0,0,0,57,163,
        1,0,0,0,59,166,1,0,0,0,61,168,1,0,0,0,63,170,1,0,0,0,65,173,1,0,
        0,0,67,176,1,0,0,0,69,192,1,0,0,0,71,202,1,0,0,0,73,74,5,124,0,0,
        74,75,5,58,0,0,75,2,1,0,0,0,76,77,5,58,0,0,77,78,5,124,0,0,78,4,
        1,0,0,0,79,80,5,40,0,0,80,6,1,0,0,0,81,82,5,41,0,0,82,8,1,0,0,0,
        83,84,5,60,0,0,84,85,5,45,0,0,85,10,1,0,0,0,86,87,5,60,0,0,87,88,
        5,63,0,0,88,89,5,62,0,0,89,12,1,0,0,0,90,91,5,60,0,0,91,92,5,33,
        0,0,92,93,5,62,0,0,93,14,1,0,0,0,94,95,5,60,0,0,95,96,5,58,0,0,96,
        97,5,62,0,0,97,16,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,18,
        1,0,0,0,101,102,5,101,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,
        105,5,101,0,0,105,20,1,0,0,0,106,107,5,119,0,0,107,108,5,104,0,0,
        108,109,5,105,0,0,109,110,5,108,0,0,110,111,5,101,0,0,111,22,1,0,
        0,0,112,113,5,123,0,0,113,24,1,0,0,0,114,115,5,125,0,0,115,26,1,
        0,0,0,116,117,5,35,0,0,117,28,1,0,0,0,118,119,5,91,0,0,119,30,1,
        0,0,0,120,121,5,93,0,0,121,32,1,0,0,0,122,123,5,60,0,0,123,124,5,
        60,0,0,124,34,1,0,0,0,125,126,5,56,0,0,126,127,5,60,0,0,127,36,1,
        0,0,0,128,129,7,0,0,0,129,130,7,1,0,0,130,38,1,0,0,0,131,133,7,2,
        0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,
        0,0,135,40,1,0,0,0,136,140,7,3,0,0,137,139,7,4,0,0,138,137,1,0,0,
        0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,42,1,0,0,0,
        142,140,1,0,0,0,143,147,7,5,0,0,144,146,7,4,0,0,145,144,1,0,0,0,
        146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,44,1,0,0,0,149,
        147,1,0,0,0,150,151,5,43,0,0,151,46,1,0,0,0,152,153,5,45,0,0,153,
        48,1,0,0,0,154,155,5,42,0,0,155,50,1,0,0,0,156,157,5,47,0,0,157,
        52,1,0,0,0,158,159,5,37,0,0,159,54,1,0,0,0,160,161,5,61,0,0,161,
        162,5,61,0,0,162,56,1,0,0,0,163,164,5,47,0,0,164,165,5,61,0,0,165,
        58,1,0,0,0,166,167,5,60,0,0,167,60,1,0,0,0,168,169,5,62,0,0,169,
        62,1,0,0,0,170,171,5,60,0,0,171,172,5,61,0,0,172,64,1,0,0,0,173,
        174,5,62,0,0,174,175,5,61,0,0,175,66,1,0,0,0,176,177,5,126,0,0,177,
        178,5,126,0,0,178,179,5,126,0,0,179,183,1,0,0,0,180,182,8,6,0,0,
        181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,
        184,186,1,0,0,0,185,183,1,0,0,0,186,187,5,126,0,0,187,188,5,126,
        0,0,188,189,5,126,0,0,189,190,1,0,0,0,190,191,6,33,0,0,191,68,1,
        0,0,0,192,196,5,34,0,0,193,195,8,7,0,0,194,193,1,0,0,0,195,198,1,
        0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,
        0,0,0,199,200,5,34,0,0,200,70,1,0,0,0,201,203,7,8,0,0,202,201,1,
        0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,206,1,
        0,0,0,206,207,6,35,0,0,207,72,1,0,0,0,7,0,134,140,147,183,196,204,
        1,6,0,0
    ]

class jsBachLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    KEY = 19
    NUM = 20
    VAR = 21
    METHOD_NAME = 22
    MES = 23
    MENYS = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQ = 28
    NEQ = 29
    LT = 30
    GT = 31
    LEQ = 32
    GEQ = 33
    COMMENT = 34
    STR = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|:'", "':|'", "'('", "')'", "'<-'", "'<?>'", "'<!>'", "'<:>'", 
            "'if'", "'else'", "'while'", "'{'", "'}'", "'#'", "'['", "']'", 
            "'<<'", "'8<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'/='", 
            "'<'", "'>'", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "KEY", "NUM", "VAR", "METHOD_NAME", "MES", "MENYS", "MUL", "DIV", 
            "MOD", "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "COMMENT", "STR", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "KEY", "NUM", "VAR", 
                  "METHOD_NAME", "MES", "MENYS", "MUL", "DIV", "MOD", "EQ", 
                  "NEQ", "LT", "GT", "LEQ", "GEQ", "COMMENT", "STR", "WS" ]

    grammarFileName = "jsBach.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


